#ifndef CalibAlig_h
#define CalibAlig_h

using namespace std;

vector<int> Feb_Chamber(int sn_){

	vector<int> Feb_Chamber_vec;
	Feb_Chamber_vec.clear();

        int feb_ = 0;
        int chamber_ = 0;
        if(sn_>=458&&sn_<=542) {feb_=7; chamber_=41;}
        if(sn_>=565&&sn_<=573) {feb_=9; chamber_=41;}
        if(sn_>=576&&sn_<=577) {feb_=1; chamber_=31;}
        if(sn_>=578&&sn_<=589) {feb_=2; chamber_=31;}
        if(sn_>=592&&sn_<=601) {feb_=2; chamber_=31;}
        if(sn_>=602&&sn_<=610) {feb_=1; chamber_=31;}
        if(sn_>=611&&sn_<=615) {feb_=9; chamber_=41;}
        if(sn_>=195&&sn_<=202) {feb_=1; chamber_=41;}
        if(sn_>=617&&sn_<=623) {feb_=7; chamber_=41;}
        if(sn_>=210&&sn_<=220) {feb_=2; chamber_=41;}
        if(sn_>=224&&sn_<=231) {feb_=6; chamber_=31;}
        if((sn_>=224&&sn_<=231) || (sn_==21||sn_==22 || sn_==252 || sn_==253)) {feb_=6; chamber_=31;}
	if(sn_==261) {feb_=6; chamber_=31;}
        if(sn_==274||sn_==277) {feb_=10; chamber_=31;}
	if(sn_==289)  {feb_=5; chamber_=31;}
        if(sn_==644)  {feb_=12; chamber_=31;} //temporary feb number
	if(sn_==650||sn_==651) {feb_=11; chamber_=31;}
        if(sn_==293)  {feb_=14; chamber_=31;}

// ADD HERE NEW SACN_ID AND IT FEB AND CHAMBER NUMBERS
// EXAMPLE:
// if(sn_==XX) {feb_==YY; chamber_=ZZ;}
//



	if(feb_==0 || chamber_==0) {feb_=7; chamber_=41;}


	Feb_Chamber_vec.push_back(feb_);
	Feb_Chamber_vec.push_back(chamber_);
	return Feb_Chamber_vec;
}




vector<vector<double> > time_corr_fine_func(int sn_){ 

        vector<int> Feb_Chamber_vec = Feb_Chamber(sn_);

	int feb_ = Feb_Chamber_vec.at(0);

        double time_corr_fine_7[3][32] = {
                {12.693,11.6978,13.6978,17.6978,12.6978,16.6946,12.6978,15.6063,14.6978,13.68,14.6978,16.6978,21.6978,14.6978,16.6978,19.6978,15.6978,20.6978,19.6978,15.6966,19.7382,16.6977,16.8368,15.6978,16.6978,15.0174,21.2743,19.6978,12.6978,14.6415,15.6978,12.6978},
                {12.6978,11.6984,13.6978,18.6976,12.8031,16.6978,12.6978,15.6978,14.6978,13.6978,14.6978,16.6978,21.6978,15.6974,16.6978,19.6978,15.698,20.6978,20.6978,15.6978,20.6978,16.6978,17.6978,15.6978,17.5152,15.6978,21.6978,19.6978,12.6978,13.8225,15.6978,12.6978},
                {12.6978,11.6978,13.6978,17.6978,12.6978,16.6971,12.6978,14.7291,14.6978,13.6974,14.6978,16.6978,21.6978,14.6978,16.6978,19.6978,15.6978,20.6978,19.6978,14.6978,19.6978,16.6964,16.6978,15.6978,16.6978,14.6978,20.6978,19.6978,12.2849,13.6978,15.6978,12.6978}
        };
        double time_corr_fine_9[3][32] = {
                {12.5838,12.5838,13.5838,18.5838,13.5837,16.6023,12.602,15.6023,14.602,13.6023,15.602,16.6023,21.6027,15.5838,16.5839,19.5838,16.581,21.5812,20.581,15.5812,20.5838,16.5838,17.5838,16.1256,17.5838,15.5838,21.5838,20.5568,12.5838,14.5838,16.4877,12.7723},
                {12.5838,12.4118,13.5838,18.5838,13.5837,16.5838,12.5838,15.5838,14.5838,13.5838,14.5839,16.5838,21.5838,14.94,16.5838,19.5838,15.5838,20.5838,19.5838,14.805,19.5838,16.5838,17.5838,15.5838,16.5838,14.5838,21.5838,19.5838,12.5838,13.9309,15.5838,12.5838},
                {12.3392,11.5838,13.5838,17.5838,12.5838,16.5012,12.5838,14.9183,14.5838,13.5838,14.5838,16.5838,21.5838,14.5838,16.5838,18.5838,15.5838,20.5838,20.0628,15.5838,19.5838,16.5838,17.5631,15.5838,16.5838,14.925,20.5839,19.5838,12.5838,13.5848,15.5838,12.5838}
        };
        double time_corr_fine_1[3][32] = {
                {12.5625,12.5625,13.5609,18.5609,13.5592,16.5592,12.5621,15.5622,14.5592,13.5592,15.5384,16.5592,21.5592,15.5592,16.5656,19.5617,16.5653,20.5582,20.5924,15.5701,20.5952,16.5721,17.567,15.5655,17.5594,15.5589,21.5639,19.564,12.5617,14.5618,15.598,12.5632},
                {12.5592,11.5598,13.5592,18.5592,13.5053,16.5592,12.5592,15.5592,14.5641,13.5592,14.571,16.5641,21.571,14.5712,16.5645,19.5647,15.5625,20.5625,20.5625,15.5625,20.5625,16.5592,17.5592,15.5634,17.5592,14.6062,21.5639,19.564,12.5686,14.5477,15.5673,12.5668},
                {12.5633,12.5648,13.5697,18.5647,12.752,16.5642,12.5691,15.5692,14.5691,13.5642,15.563,16.5642,21.5592,15.5591,16.5592,19.5592,15.8607,20.5592,20.5592,15.5592,20.439,16.5578,17.5592,15.5592,17.3047,15.5592,21.5592,19.5592,12.5565,14.5575,15.5573,12.5574}
        };
        double time_corr_fine_2[3][32] = {
                {12.3728,12.3728,13.3728,18.3772,13.3783,16.3728,12.3728,15.3728,14.3728,13.3728,15.3727,16.3728,21.3728,15.3728,16.3728,20.3728,16.3583,20.3728,20.3728,15.3728,20.3492,16.3728,17.3728,15.3728,17.3728,15.3728,21.3728,19.3728,12.3728,14.3728,16.376,13.3728},
                {12.3736,12.3558,13.3728,18.3728,13.3579,16.3728,12.3875,15.3778,14.3808,13.375,15.3728,16.3728,21.3793,15.3792,16.3728,19.3728,15.3729,20.3729,19.3729,15.3692,20.3729,16.3729,17.378,15.3781,17.3747,15.3412,21.3748,19.3729,12.3743,14.3744,15.3729,13.3585},
                {12.7361,12.3728,14.3727,18.3728,13.3728,16.7191,13.3728,15.3702,15.3751,14.0005,15.3797,17.3656,22.3797,15.3798,17.371,20.3728,16.3729,21.3729,20.3729,16.3729,20.3708,17.3725,18.1596,16.3729,17.3729,15.3729,22.1742,20.3729,13.3555,14.377,16.3729,13.3729}
        };
        double time_corr_fine_9_2[3][32] = {
                {11.7402,11.7402,12.7402,17.7402,12.7393,15.7402,11.7402,14.7402,13.7402,12.7402,14.7402,15.7402,20.7608,14.7402,15.7402,18.2543,15.7402,20.7335,19.7402,14.7402,19.7402,15.7402,16.7402,15.0383,16.7402,14.7402,20.7402,19.4417,11.7402,13.7402,15.426,11.7446},
                {11.7107,10.7402,12.7402,16.9579,14.7402,15.7402,11.7402,14.4675,13.7402,12.7402,13.7402,15.7402,20.7402,16.7402,15.7402,17.7445,14.7402,19.7402,18.7402,16.7402,18.7402,15.7402,16.2941,14.7402,15.7402,13.7402,20.7401,18.7402,11.7402,12.7428,14.7402,11.7402},
                {11.4446,10.7402,12.7402,16.7402,11.7402,15.7161,11.7402,14.5476,13.7402,12.7402,13.7402,15.7402,20.7402,13.7402,15.7402,17.7409,14.7402,19.7402,19.3875,14.7387,18.7402,15.7402,16.669,14.7402,15.7402,13.8002,19.7402,18.7402,11.7402,12.7402,14.7402,11.7402}
        };
        double time_corr_fine_6[3][32] = {
                {15.3147,13.3131,13.2824,15.2839,14.2824,15.3131,12.3131,15.3131,11.3131,14.3131,15.3131,16.3131,19.074,15.3131,17.3131,19.3131,-1148.19,-1148.19,-1148.19,-1148.19,-1148.19,-1148.19,-1148.19,-1148.19,-1148.19,-1148.19,-1148.19,-1148.19,-1148.19,-1148.19,-1148.19,-1148.19},
                {15.3131,13.3131,13.3131,16.2528,14.3131,15.3131,12.3131,15.3131,11.3131,14.3131,15.3131,16.3131,19.3131,15.3131,18.3127,19.3131,17.3129,18.3131,18.3131,15.3131,18.3131,17.4229,17.303,16.3131,17.3131,17.3131,21.3131,19.3131,17.3131,16.3131,15.3131,15.3131},
                {15.3131,13.3131,13.3131,15.3131,14.3131,15.3131,12.3131,15.3131,11.3838,14.3131,15.3131,16.3131,18.3131,15.3131,16.324,19.0838,16.3131,18.3131,18.3131,15.3131,17.3132,17.3131,16.3131,16.3131,17.3105,17.3131,20.3089,18.3093,17.3089,15.3092,14.9573,15.3093}
        };
        double time_corr_fine_6_2[3][32] = {
                {19.9038,11.9038,9.9038,11.9038,10.9004,10.9038,8.9038,9.01181,9.9038,9.90428,13.9037,12.9038,16.9038,11.9038,12.9038,14.3017,16.9038,16.9038,13.9038,11.9038,15.9038,15.9038,14.2609,15.9025,14.9038,13.9041,17.7356,14.9038,12.9038,13.9038,13.4401,12.9038},
                {9.9038,11.9038,9.9038,11.9076,10.9038,11.9038,8.9038,9.90365,9.9038,10.9038,13.9038,12.9038,17.9038,11.9038,13.9038,14.9038,15.9038,15.9038,13.9033,11.9038,15.9038,14.9038,13.9038,14.9038,13.9039,13.9038,16.9038,13.9038,11.9038,12.9038,11.9038,11.9038},
                {9.9038,10.9038,9.9038,11.9038,10.3482,10.9039,8.9038,8.9038,9.90233,9.9038,12.9059,12.9038,16.9038,11.9038,12.9038,14.5518,15.9038,15.9038,12.9038,11.9038,14.9038,14.9038,13.9036,14.9038,13.9038,13.9038,15.9038,13.9038,11.9038,12.9038,11.9038,11.1062}
        };
        double time_corr_fine_6_3[3][32] = {
                {9.9038,11.9038,9.9038,11.9038,10.9004,10.9038,8.9038,9.01181,9.9038,9.90428,13.9037,12.9038,16.9038,11.9038,12.9038,14.3017,16.9038,16.9038,13.9038,11.9038,15.9038,15.9038,14.2609,15.9025,14.9038,13.9041,17.7356,14.9038,12.9038,13.9038,13.4401,12.9038},
                {9.9038,11.9038,9.9038,11.9076,10.9038,11.9038,8.9038,9.90365,9.9038,10.9038,13.9038,12.9038,17.9038,11.9038,13.9038,14.9038,15.9038,15.9038,13.9033,11.9038,15.9038,14.9038,13.9038,14.9038,13.9039,13.9038,16.9038,13.9038,11.9038,12.9038,11.9038,11.9038},
                {9.9038,10.9038,9.9038,11.9038,10.3482,10.9039,8.9038,8.9038,9.90233,9.9038,12.9059,12.9038,16.9038,11.9038,12.9038,14.5518,15.9038,15.9038,12.9038,11.9038,14.9038,14.9038,13.9036,14.9038,13.9038,13.9038,15.9038,13.9038,11.9038,12.9038,11.9038,11.1062}
        };
        double time_corr_fine_10[3][32] = {
		{11.2978,9.43231,11.2978,13.2978,11.2817,14.2978,10.2978,10.2978,9.29777,11.2978,11.2978,12.2978,15.2978,-648.202,13.2978,15.2663,13.2978,15.2978,15.2978,11.2978,15.2978,15.1169,11.2978,13.2978,12.2978,11.2978,16.2978,15.2978,9.29777,10.2978,13.2978,12.2978},
		{11.2978,9.3035,11.2978,13.2978,11.2978,14.2978,10.2978,10.2978,9.29777,11.2978,11.2978,12.2978,15.2978,11.2978,13.2978,15.2978,13.2978,15.2978,15.2978,11.2978,15.2978,14.3127,11.2978,13.2978,12.2978,11.2978,16.2978,15.2978,9.29777,10.2978,13.2978,12.2978},
		{12.2978,10.2978,11.2978,13.2978,11.2978,14.2978,10.2978,11.2978,9.29778,11.2978,11.3036,12.2978,15.2978,12.2976,13.2978,15.2978,14.2961,16.2902,15.2978,11.2978,15.7672,15.2975,11.2978,13.2978,12.2978,11.3082,16.2978,15.2978,9.29777,10.2978,13.2978,12.2978}
        };
        double time_corr_fine_11[3][32] = {
                {12.0147,10.1052,11.103,13.103,11.103,14.103,10.1094,11.0926,9.10945,11.1094,11.4666,12.1095,15.103,11.103,12.103,14.103,13.103,15.103,15.103,11.107,15.1073,15.0949,11.1031,13.103,12.103,11.1102,16.103,15.103,9.10298,10.103,12.0998,12.0998},
		{12.103,10.103,11.7071,14.103,11.103,14.103,11.1028,11.103,10.103,12.103,12.103,12.103,15.103,12.103,13.103,14.9874,14.103,16.103,15.103,12.103,16.103,15.103,12.103,14.103,12.1031,12.103,16.103,15.108,9.10298,10.103,13.103,12.103},
		{12.1111,10.1111,11.103,13.103,11.103,14.1175,10.2495,11.103,10.103,12.1026,12.103,12.103,15.103,12.1028,13.103,14.8407,14.103,16.103,15.103,12.0604,16.0975,15.103,12.1005,13.1092,12.103,12.103,16.103,15.1253,9.10298,10.103,13.103,12.103}
	};
        double time_corr_fine_12[3][32] = {
		{/*-624.809*/11.6,11.6909,12.6909,14.6909,12.4604,15.6909,11.6909,10.6909,10.7947,12.6909,13.6909,14.6803,16.6909,13.6909,14.6909,15.6909,-624.809,17.6909,20.3283,14.6909,17.7827,15.6909,13.6909,14.6909,14.6909,15.6909,19.6909,17.6909,14.6909,12.7613,13.6909,16.6909},
		{/*-624.809*/11.6,11.6909,12.6909,14.6909,12.6909,15.6909,11.6909,10.6909,10.76,12.6909,13.6909,14.6909,16.691,13.6909,14.6909,15.6909,-624.809,17.6909,20.6908,14.6909,18.6909,15.6909,13.6909,14.6909,14.6909,15.6909,19.6909,17.6909,14.6909,13.6909,13.6909,16.6909},
		{/*-624.809*/11.6,11.6909,12.6909,14.6909,12.6909,15.6909,11.6909,10.6909,11.6909,12.7049,13.8979,14.6909,16.8181,13.6909,14.6909,15.6909,-624.809,17.6909,19.6909,14.6909,18.6866,15.6909,13.6909,14.6909,14.6909,15.6909,19.6909,17.6909,14.6909,13.6909,13.6909,16.6909}
	};
        double time_corr_fine_13[3][32] = {
		{/*-624.749*/11.6,11.7509,12.7509,14.7509,12.7509,15.7509,11.7509,10.7509,11.7289,12.7509,13.7509,14.7403,16.7509,13.7509,14.7509,15.7509,-624.749,17.7509,19.7542,14.7509,17.92,15.7509,13.7509,14.7509,14.7509,15.7509,19.7509,17.7509,14.7493,13.7508,13.7509,16.7509},
		{/*-624.749*/11.6,11.7509,12.7509,14.7549,11.7722,14.7509,11.7509,10.7509,10.7509,12.7509,13.7509,13.7509,16.7509,12.7829,14.7509,15.7509,-624.749,17.7509,19.7509,14.7506,17.7509,15.7509,13.7509,14.4719,14.7509,15.1968,19.7509,17.7509,14.7551,12.7509,13.7509,16.7509},
		{/*-624.749*/11.6,11.7509,12.7509,14.7509,12.7509,15.7509,11.7509,10.7509,11.5656,12.7509,13.7509,14.7509,16.7555,13.7509,14.7509,15.7509,-624.749,17.7509,19.7509,14.7509,17.8546,15.7509,13.7509,14.7509,14.7509,15.7509,19.7509,17.7509,14.7509,13.7185,13.7509,16.7509}
        };
        double time_corr_fine_14[3][32] = {
		{/*-649.623*/11.6,11.8773,12.8773,14.8773,12.2612,15.8014,11.8773,10.8773,10.8803,12.8773,13.8773,13.8773,16.8773,13.8773,14.8773,15.8773,-649.623,17.8773,19.8773,14.8773,17.8773,15.8773,13.8773,14.3728,14.8773,15.8773,19.8773,17.8773,13.879,13.8755,13.8773,16.6869},
		{/*-649.623*/11.6,11.8773,12.8773,14.8773,12.8773,15.8773,11.8773,10.8773,11.8773,12.8773,13.8773,14.8773,16.8774,13.8773,14.8773,15.8773,-649.623,17.8773,20.6365,14.8773,18.3101,15.8773,13.8773,14.8773,14.8773,15.8773,19.8773,17.8773,14.8773,13.8773,13.8773,16.8773},
		{/*-649.623*/11.6,11.8773,12.8191,14.8773,11.8773,14.8773,11.8773,10.8773,10.8773,12.8773,13.8773,13.8773,16.8773,12.8773,13.8831,15.8773,-649.623,17.8425,19.8773,14.397,17.8773,14.9371,12.9582,13.8773,13.8863,14.8773,18.8773,17.5521,13.8773,12.8773,12.8784,15.8773}
        };


// ADD HERE THE TIME CALIBRATION VALUES IF YOU NEW SACN_ID DO NOT HAVE IT YET.



        double time_corr_fine[3][32];

        if(feb_==7) memcpy(time_corr_fine, time_corr_fine_7, sizeof(time_corr_fine));
        if(feb_==9 && sn_<600) memcpy(time_corr_fine, time_corr_fine_9, sizeof(time_corr_fine));
        if(feb_==1) memcpy(time_corr_fine, time_corr_fine_1, sizeof(time_corr_fine));
        if(feb_==2) memcpy(time_corr_fine, time_corr_fine_2, sizeof(time_corr_fine));
        if(feb_==9 && sn_>600) memcpy(time_corr_fine, time_corr_fine_9_2, sizeof(time_corr_fine));
        if(feb_==6 && sn_>200 && sn_<232) memcpy(time_corr_fine, time_corr_fine_6, sizeof(time_corr_fine));
        if(feb_==6 && sn_<200 && sn_>180) memcpy(time_corr_fine, time_corr_fine_6_2, sizeof(time_corr_fine));
        if(feb_==6 && (sn_==252 || sn_==253)) memcpy(time_corr_fine, time_corr_fine_6_3, sizeof(time_corr_fine));
	if(sn_==261) memcpy(time_corr_fine, time_corr_fine_6_2, sizeof(time_corr_fine));
	if(feb_==10) memcpy(time_corr_fine, time_corr_fine_10, sizeof(time_corr_fine));
        if(feb_==5) memcpy(time_corr_fine, time_corr_fine_11, sizeof(time_corr_fine));
        if(feb_==11) memcpy(time_corr_fine, time_corr_fine_12, sizeof(time_corr_fine));
        if(feb_==12) memcpy(time_corr_fine, time_corr_fine_13, sizeof(time_corr_fine));
        if(feb_==14) memcpy(time_corr_fine, time_corr_fine_14, sizeof(time_corr_fine));

// ASSOCIATE HERE THE TIME CALIBRATION VECTOR WITH SCAN_ID/FEB NUMBERS



	vector<vector<double> > time_corr_fine_vec;
	time_corr_fine_vec.clear();
	vector<double> temp;
	temp.clear();
	for(int i=0; i<(sizeof(time_corr_fine[0])/sizeof(time_corr_fine[0][0]));i++){
		temp.push_back(time_corr_fine[0][i]);
	}
	time_corr_fine_vec.push_back(temp);
	temp.clear();
        for(int i=0; i<(sizeof(time_corr_fine[0])/sizeof(time_corr_fine[0][0]));i++){
                temp.push_back(time_corr_fine[1][i]);
        }
        time_corr_fine_vec.push_back(temp);
        temp.clear();
        for(int i=0; i<(sizeof(time_corr_fine[0])/sizeof(time_corr_fine[0][0]));i++){
                temp.push_back(time_corr_fine[2][i]);
        }


        time_corr_fine_vec.push_back(temp);

	return time_corr_fine_vec;

}


vector<double> Aligment_factor(int sn_, int dist, int side){
// dist =1,2,3 = HR_to_conector,LR_to_conector,Strip_length
// side =1,2 = G,R

        vector<int> Feb_Chamber_vec = Feb_Chamber(sn_);
        int chamber = Feb_Chamber_vec.at(1);


        vector<double> HR_to_conector_RE31_G{89.54,79.41, 69.29,59.17, 49.07,39.9, 35.71,31.52, 31.17,35.36,39.55,48.2, 58.32,68.43,78.55,88.66, 56.09,66.2,76.32,86.43, 96.55,106.67,116.78,126.9, 137.01,147.12,157.24,167.36, 177.47,187.59,197.7, 207.82, 175.12,185.38,195.48,205.6, 215.85,225.83,235.95,246.07, 256.18,266.3,276.67,286.53, 301.56,314.65,328.49,342.22}; 
        vector<double> LR_to_conector_RE31_G{2314.41,2304.93,2295.47,2286.0, 2276.53,2267.07,2257.61,2248.13, 2238.67,2229.2,2219.73,2210.27, 2200.79,2191.33,2181.88,2172.39, 2120.25,2110.78,2101.32,2091.85,2082.38,2072.92,2063.44,2053.98, 2044.52,2035.05,2025.58,2016.12,2006.65,1997.18,1987.72,1978.24, 1926.1,1916.63,1907.16,1897.7, 1888.23,1878.77,1869.3,1855.76, 1844.2,1832.12,1819.98,1807.77,1795.51,1783.16,1770.75,1757.01};
        vector<double> Strip_length_RE31_G{1468.0, 1468.02,1468.06, 1468.12,1468.2, 1468.3,1468.41,1468.55,1467.71,1468.89,1469.09,1469.31,1469.54,1469.8,1470.08,1470.38,1470.69,1471.03,1471.39,1471.76,1472.16,1472.57,1473.01,1473.46,1473.94,1474.43,1474.94,1475.48,1476.03,1476.6,1477.19,1477.81, 1477.13,1479.09,1479.76,1480.44,1480.16,1481.88,1482.63,1481.65,1477.53,1472.48,1466.4,1462.27,1452.54,1436.8,1420.18,1403.59};
        vector<double> HR_to_conector_RE31_R{90.78, 80.67, 70.55, 60.44, 50.32, 40.43, 36.24, 32.05, 30.64, 34.83, 39.02, 46.92, 57.04, 67.15, 77.27, 87.38, 54.82, 64.93, 75.05, 85.16, 95.28, 105.4, 115.51,125.63, 135.74,145.86,155.97,166.09,176.2, 186.32,196.44,206.55,173.99,184.11,194.22,204.33,214.58,224.56,234.68,244.8, 254.91,265.03,275.4,285.26, 300.29,313.38,327.22,340.95};
        vector<double> LR_to_conector_RE31_R{2313.13,2303.66,2294.2,2284.73,2275.26,2265.8,2256.33,2246.86,2237.4,2227.93,2218.46,2209.0,2199.53,2190.06,2180.6,2171.12,2118.98,2109.51,2100.05,2090.58,2081.11,2071.65,2062.18,  2052.71,2043.25,2033.78,2024.31,2014.85,2005.38,1995.91,1986.45,1976.98,1924.83,1915.37,1905.9,1896.43,1886.96,1877.5,1868.03,1854.49,1842.93,1830.86,1818.71,1806.51,1794.23,1781.9,1769.49,1755.74};
        vector<double> Strip_length_RE31_R{1468.0, 1468.02,1468.06,1468.12,1468.2,1468.3,1468.41,1468.55,1467.71,1468.89,1469.09,1469.31,1469.54,1469.8,1470.08,1470.38,1470.69,1471.03,1471.39,1471.76,1472.16,1472.57,1473.01,1473.46,1473.94,1474.43,1474.94,1475.48,1476.03,1476.6,1477.19,1477.81, 1477.13,1479.09,1479.76,1480.44,1480.16,1481.88,1482.63,1481.65,1477.53,1472.48,1466.4,1462.27,1452.54,1436.8,1420.18,1403.59};
        vector<double> HR_to_conector_RE41_G{89.51,79.4,69.28,59.17,49.05,39.9,35.71,31.52,31.17,35.36,39.55,48.19,58.3,68.42,78.54,88.65,56.09,66.2,76.32,86.43,96.55,106.66,116.78,126.89,137.01,147.13,157.23,167.36,177.47,187.59,197.87,207.82,175.25,185.37,195.48,205.6,215.71,225.83,235.95,246.06,256.18,266.29,276.41,286.52,301.52,314.55,328.53,342.07};
        vector<double> LR_to_conector_RE41_G{2106.88,2096.5,2086.12,2075.74,2065.36,2054.98,2044.6,2034.22,2023.84,2013.47,2003.09,1992.7,1982.33,1971.95,1961.57,1951.19,1898.13,1887.75,1877.37,1866.99,1856.62,1846.23,1835.85,1825.47,1815.09,1804.71,1794.33,1783.95,1773.57,1763.19,1752.82,1742.44,1689.38,1678.99,1668.62,1658.24,1647.86,1637.48,1627.1,1616.72,1602.64,1589.9,1576.42,1562.87,1549.23,1535.53,1521.75,1506.61};
        vector<double> Strip_length_RE41_G{1227.42,1227.12,1220.05,1220.1,1220.16,1220.24,1220.12,1220.04,1220.83,1220.74,1220.9,1220.38,1220.45,1221.86,1221.17,1221.77,1221.77,1222.52,1222.81,1223.12,1223.45,1223.8,1224.16,1224.54,1224.93,1225.34,1225.77,1226.21,1225.54,1227.91,1226.42,1228.96,1228.96,1229.21,1229.76,1230.34,1230.92,1231.53,1232.15,1232.78,1234.47,1225.26,1220.83,1214.69,1203.98,1187.26,1179.13,1151.98};
        vector<double> HR_to_conector_RE41_R{90.89,80.67,70.55,60.44,50.32,40.43,36.24,32.05,30.64,34.83,39.02,46.92,57.03,67.15,77.27,87.38,54.82,64.93,75.05,85.16,95.28,105.39,115.51,125.62,135.74,145.86,155.97,166.09,176.2,186.32,196.6,206.55,173.98,184.1,194.21,204.33,214.44,224.56,234.68,244.79,254.91,265.02,275.14,285.25,300.25,313.27,327.26,340.79};
        vector<double> LR_to_conector_RE41_R{2105.61,2095.23,2084.85,2074.47,2064.09,2053.71,2043.33,2032.95,2022.57,2012.2,2001.82,1991.44,1981.06,1970.68,1960.3,1949.92,1896.86,1886.48,1876.1,1865.72,1855.34,1844.96,1834.58,1824.2,1813.82,1803.44,1793.06,1782.68,1772.3,1761.92,1751.54,1741.17,1688.11,1677.73,1667.35,1656.97,1646.59,1636.21,1625.83,1615.45,1601.37,1588.63,1575.15,1561.6,1547.96,1534.26,1520.48,1505.34};
        vector<double> Strip_length_RE41_R{11227.42,1227.12,1220.05,1220.1,1220.16,1220.24,1220.12,1220.04,1220.83,1220.74,1220.9,1220.38,1220.45,1221.86,1221.17,1221.77,1221.77,1222.52,1222.81,1223.12,1223.45,1223.8,1224.16,1224.54,1224.93,1225.34,1225.77,1226.21,1225.54,1227.91,1226.42,1228.96,1228.96,1229.21,1229.76,1230.34,1230.92,1231.53,1232.15,1232.78,1234.47,1225.26,1220.83,1214.69,1203.98,1187.26,1179.13,1151.98};


	vector<double> temp;
	temp.clear();
	if(chamber==31 && dist==1 && side==1) temp = HR_to_conector_RE31_G;
        if(chamber==31 && dist==1 && side==2) temp = HR_to_conector_RE31_R;
        if(chamber==31 && dist==2 && side==1) temp = LR_to_conector_RE31_G;
        if(chamber==31 && dist==2 && side==2) temp = LR_to_conector_RE31_R;
        if(chamber==31 && dist==3 && side==1) temp = Strip_length_RE31_G;
        if(chamber==31 && dist==3 && side==2) temp = Strip_length_RE31_R;
        if(chamber==41 && dist==1 && side==1) temp = HR_to_conector_RE41_G;
        if(chamber==41 && dist==1 && side==2) temp = HR_to_conector_RE41_R;
        if(chamber==41 && dist==2 && side==1) temp = LR_to_conector_RE41_G;
        if(chamber==41 && dist==2 && side==2) temp = LR_to_conector_RE41_R;
        if(chamber==41 && dist==3 && side==1) temp = Strip_length_RE41_G;
        if(chamber==41 && dist==3 && side==2) temp = Strip_length_RE41_R;

	return temp;
}







#endif
